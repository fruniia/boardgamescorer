@page "/queendomino"
@using BoardGameScorer.WebUI.Server.Components.Kingdomino
@inject IGameService<KingdominoPlayer> gameService
@layout KingdominoLayout
@rendermode InteractiveServer

<h3>Setup Players</h3>
<div class="mb-3 form-group">
	<label for="numPlayers">Number of Players:</label>
	<input type="number" class="form-control" id="numPlayers" @bind="numPlayers" Min="2" Max="4" />
</div>
<Button Color="ButtonColor.Info" Outline="true" @onclick="AddNumberOfPlayers">
	@(hasPlayers ? "Update number of players" : "Add number of players")
</Button>

@if (setUp.NumberOfPlayers > 0 && setUp.Players.Count > 0)
{
	<div class="mb-3">
		<h4>Enter player names</h4>
		@foreach (var player in setUp.Players)
		{
			<div class="mb-3 form-group">
				<label for="@player.Id">Player @player.Id:</label>
				<input type="text" id="@player.Id" @bind=@player.Name />
			</div>
		}
	</div>

	<Button Color="ButtonColor.Info" Outline="true" @onsubmit="SavePlayer">Save playernames</Button>
	@foreach (var player in gameService.GetPlayers())
	{
		<p>@player.Name</p>
	}
}

@code {
	private KingDominoPlayerSetup setUp = new();
	private KingdominoPlayer Player { get; set; } = new();
	private int numPlayers;
	private bool hasPlayers = false;

	protected override void OnInitialized()
	{
		setUp.Players = gameService.GetPlayers();
	}

	private void AddNumberOfPlayers()
	{
		setUp.NumberOfPlayers = new();
	    setUp.NumberOfPlayers = numPlayers;
		if (hasPlayers)
		{
			ChangeNumberOfPlayers();
		}
		else
		{
			AddPlayer();
		}
	}

	private void ChangeNumberOfPlayers()
	{
		setUp.Players.Clear();
		foreach(var player in setUp.Players)
		{	
			gameService.UpdatePlayer(player);
		}
			hasPlayers = false;
		AddPlayer();
	}

	private void AddPlayer()
	{
		if (setUp.NumberOfPlayers >= 2 && setUp.NumberOfPlayers <= 4 && setUp.Players.Count() < 3)
		{
			for (int i = 0; i < setUp.NumberOfPlayers; i++)
			{
				var newId = GenerateUniqueId();
				gameService.AddPlayers(new KingdominoPlayer { Id = newId });
			}
			hasPlayers = true;
		}
	}

	private void SavePlayer()
	{
		foreach (var player in setUp.Players)
		{
			var update = gameService.GetPlayerById(player.Id);
			if (update is not null)
			{
				update.Name = player.Name;
				gameService.UpdatePlayer(update);
				hasPlayers = true;
			}
		}
	}

	private int GenerateUniqueId()
	{
		return setUp.Players.Count > 0 ? setUp.Players.Max(p => p.Id) + 1 : 1;
	}
}