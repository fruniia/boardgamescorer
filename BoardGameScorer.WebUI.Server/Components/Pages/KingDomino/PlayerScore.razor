@page "/queendominos"
@using BoardGameScorer.WebUI.Server.Components.Kingdomino
@layout KingdominoLayout
@rendermode InteractiveServer
<h6 class="mt-3 mb-3">Fill in your score below</h6>
<EditForm EditContext="_editContext" FormName="addScore" OnValidSubmit="HandleSubmit">
	<DataAnnotationsValidator />
	<ValidationSummary />
	<div class="mb-3">
		<label for="terrain" class="form-label">--Select Terrain--</label>
		<InputSelect id="terrain" class="form-select" @bind-Value=Model!.Terrain>
			<optgroup label="--Select Terrain--">
				@foreach (var terrain in Enum.GetValues(typeof(Terrain)))
				{
					<option value="@terrain">@terrain</option>
				}
			</optgroup>
		</InputSelect>
		<ValidationMessage For="@(() => @Model!.Terrain)" />
	</div>

	<div class="form-group mb-3">
		<label class="form-label" for="tiles">How many tiles?</label>
		<NumberInput TValue="int" id="tiles" @bind-Value=Model.Tiles EnableMinMax=true Min="1" Max="24" required />
		<ValidationMessage For="@(() => Model.Tiles)" />
	</div>

	<div class="form-group mb-3">
		<label class="form-label" for="crown">How many crowns?</label>
		<InputSelect id="crown" class="form-select" @bind-Value=Model.Crowns>
			@foreach (var crown in (int[])Enum.GetValues(typeof(TileWithCrown)))
			{
				<option value="@crown">@crown</option>
			}
		</InputSelect>
		<ValidationMessage For="@(() => Model!.Crowns)" />
	</div>
	<Button Type="ButtonType.Submit" Color="ButtonColor.Secondary" Outline="true">
		Confirm
	</Button>
</EditForm>@* 
<KingdominoScoreList Registration="@_registration" TotalScore="@CalculateTotalScore()" /> *@

@code {
	private EditContext? _editContext;
	[SupplyParameterFromForm]
	public KingdominoScoreEntry? Model { get; set; }
	private readonly List<KingdominoScoreEntry> _registration = [];
	protected override void OnInitialized()
	{
		Model ??= new();
		_editContext = new(Model);
		base.OnInitialized();
	}
	private void HandleSubmit()
	{
		if (Model!.Tiles > 0)
		{
			Model.TileScore = Model.CalculateTileScore();
			Model.ScoreHistory.Add(Model.TileScore);
			_registration.Add(Model);
			Model = new KingdominoScoreEntry();
			_editContext = new EditContext(Model);
		}
	}
	private int CalculateTotalScore()
	{
		return _registration.SelectMany(x => x.ScoreHistory).Sum();
	}
}